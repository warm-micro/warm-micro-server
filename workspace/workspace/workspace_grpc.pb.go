// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkspaceManagerClient is the client API for WorkspaceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceManagerClient interface {
	AddWorkspace(ctx context.Context, in *Workspace, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	ListWorkspace(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (WorkspaceManager_ListWorkspaceClient, error)
	RemoveWorkspace(ctx context.Context, in *WorkspaceReq, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type workspaceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceManagerClient(cc grpc.ClientConnInterface) WorkspaceManagerClient {
	return &workspaceManagerClient{cc}
}

func (c *workspaceManagerClient) AddWorkspace(ctx context.Context, in *Workspace, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/workspace.WorkspaceManager/addWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceManagerClient) ListWorkspace(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (WorkspaceManager_ListWorkspaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkspaceManager_ServiceDesc.Streams[0], "/workspace.WorkspaceManager/listWorkspace", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceManagerListWorkspaceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkspaceManager_ListWorkspaceClient interface {
	Recv() (*Workspace, error)
	grpc.ClientStream
}

type workspaceManagerListWorkspaceClient struct {
	grpc.ClientStream
}

func (x *workspaceManagerListWorkspaceClient) Recv() (*Workspace, error) {
	m := new(Workspace)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceManagerClient) RemoveWorkspace(ctx context.Context, in *WorkspaceReq, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/workspace.WorkspaceManager/removeWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceManagerServer is the server API for WorkspaceManager service.
// All implementations must embed UnimplementedWorkspaceManagerServer
// for forward compatibility
type WorkspaceManagerServer interface {
	AddWorkspace(context.Context, *Workspace) (*wrapperspb.StringValue, error)
	ListWorkspace(*wrapperspb.StringValue, WorkspaceManager_ListWorkspaceServer) error
	RemoveWorkspace(context.Context, *WorkspaceReq) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedWorkspaceManagerServer()
}

// UnimplementedWorkspaceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceManagerServer struct {
}

func (UnimplementedWorkspaceManagerServer) AddWorkspace(context.Context, *Workspace) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkspace not implemented")
}
func (UnimplementedWorkspaceManagerServer) ListWorkspace(*wrapperspb.StringValue, WorkspaceManager_ListWorkspaceServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWorkspace not implemented")
}
func (UnimplementedWorkspaceManagerServer) RemoveWorkspace(context.Context, *WorkspaceReq) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkspace not implemented")
}
func (UnimplementedWorkspaceManagerServer) mustEmbedUnimplementedWorkspaceManagerServer() {}

// UnsafeWorkspaceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceManagerServer will
// result in compilation errors.
type UnsafeWorkspaceManagerServer interface {
	mustEmbedUnimplementedWorkspaceManagerServer()
}

func RegisterWorkspaceManagerServer(s grpc.ServiceRegistrar, srv WorkspaceManagerServer) {
	s.RegisterService(&WorkspaceManager_ServiceDesc, srv)
}

func _WorkspaceManager_AddWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceManagerServer).AddWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workspace.WorkspaceManager/addWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceManagerServer).AddWorkspace(ctx, req.(*Workspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceManager_ListWorkspace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceManagerServer).ListWorkspace(m, &workspaceManagerListWorkspaceServer{stream})
}

type WorkspaceManager_ListWorkspaceServer interface {
	Send(*Workspace) error
	grpc.ServerStream
}

type workspaceManagerListWorkspaceServer struct {
	grpc.ServerStream
}

func (x *workspaceManagerListWorkspaceServer) Send(m *Workspace) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkspaceManager_RemoveWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceManagerServer).RemoveWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workspace.WorkspaceManager/removeWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceManagerServer).RemoveWorkspace(ctx, req.(*WorkspaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceManager_ServiceDesc is the grpc.ServiceDesc for WorkspaceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workspace.WorkspaceManager",
	HandlerType: (*WorkspaceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addWorkspace",
			Handler:    _WorkspaceManager_AddWorkspace_Handler,
		},
		{
			MethodName: "removeWorkspace",
			Handler:    _WorkspaceManager_RemoveWorkspace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listWorkspace",
			Handler:       _WorkspaceManager_ListWorkspace_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "workspace.proto",
}
