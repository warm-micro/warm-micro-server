// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardServerClient is the client API for CardServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServerClient interface {
	AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	ListCards(ctx context.Context, in *SprintId, opts ...grpc.CallOption) (CardServer_ListCardsClient, error)
	RemoveCard(ctx context.Context, in *CardId, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type cardServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServerClient(cc grpc.ClientConnInterface) CardServerClient {
	return &cardServerClient{cc}
}

func (c *cardServerClient) AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/card.CardServer/addCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServerClient) ListCards(ctx context.Context, in *SprintId, opts ...grpc.CallOption) (CardServer_ListCardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardServer_ServiceDesc.Streams[0], "/card.CardServer/listCards", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServerListCardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CardServer_ListCardsClient interface {
	Recv() (*Card, error)
	grpc.ClientStream
}

type cardServerListCardsClient struct {
	grpc.ClientStream
}

func (x *cardServerListCardsClient) Recv() (*Card, error) {
	m := new(Card)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServerClient) RemoveCard(ctx context.Context, in *CardId, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/card.CardServer/removeCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServerServer is the server API for CardServer service.
// All implementations must embed UnimplementedCardServerServer
// for forward compatibility
type CardServerServer interface {
	AddCard(context.Context, *Card) (*wrapperspb.StringValue, error)
	ListCards(*SprintId, CardServer_ListCardsServer) error
	RemoveCard(context.Context, *CardId) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedCardServerServer()
}

// UnimplementedCardServerServer must be embedded to have forward compatible implementations.
type UnimplementedCardServerServer struct {
}

func (UnimplementedCardServerServer) AddCard(context.Context, *Card) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedCardServerServer) ListCards(*SprintId, CardServer_ListCardsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCards not implemented")
}
func (UnimplementedCardServerServer) RemoveCard(context.Context, *CardId) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCard not implemented")
}
func (UnimplementedCardServerServer) mustEmbedUnimplementedCardServerServer() {}

// UnsafeCardServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServerServer will
// result in compilation errors.
type UnsafeCardServerServer interface {
	mustEmbedUnimplementedCardServerServer()
}

func RegisterCardServerServer(s grpc.ServiceRegistrar, srv CardServerServer) {
	s.RegisterService(&CardServer_ServiceDesc, srv)
}

func _CardServer_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServerServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.CardServer/addCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServerServer).AddCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardServer_ListCards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SprintId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CardServerServer).ListCards(m, &cardServerListCardsServer{stream})
}

type CardServer_ListCardsServer interface {
	Send(*Card) error
	grpc.ServerStream
}

type cardServerListCardsServer struct {
	grpc.ServerStream
}

func (x *cardServerListCardsServer) Send(m *Card) error {
	return x.ServerStream.SendMsg(m)
}

func _CardServer_RemoveCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServerServer).RemoveCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.CardServer/removeCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServerServer).RemoveCard(ctx, req.(*CardId))
	}
	return interceptor(ctx, in, info, handler)
}

// CardServer_ServiceDesc is the grpc.ServiceDesc for CardServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card.CardServer",
	HandlerType: (*CardServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addCard",
			Handler:    _CardServer_AddCard_Handler,
		},
		{
			MethodName: "removeCard",
			Handler:    _CardServer_RemoveCard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listCards",
			Handler:       _CardServer_ListCards_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "card.proto",
}
