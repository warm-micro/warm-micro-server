// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SprintManagementClient is the client API for SprintManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SprintManagementClient interface {
	AddSprint(ctx context.Context, in *Sprint, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetSprint(ctx context.Context, in *GetSprintRequest, opts ...grpc.CallOption) (*Sprint, error)
	ListSprints(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (SprintManagement_ListSprintsClient, error)
}

type sprintManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewSprintManagementClient(cc grpc.ClientConnInterface) SprintManagementClient {
	return &sprintManagementClient{cc}
}

func (c *sprintManagementClient) AddSprint(ctx context.Context, in *Sprint, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/sprint.SprintManagement/addSprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintManagementClient) GetSprint(ctx context.Context, in *GetSprintRequest, opts ...grpc.CallOption) (*Sprint, error) {
	out := new(Sprint)
	err := c.cc.Invoke(ctx, "/sprint.SprintManagement/getSprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintManagementClient) ListSprints(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (SprintManagement_ListSprintsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SprintManagement_ServiceDesc.Streams[0], "/sprint.SprintManagement/listSprints", opts...)
	if err != nil {
		return nil, err
	}
	x := &sprintManagementListSprintsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SprintManagement_ListSprintsClient interface {
	Recv() (*Sprint, error)
	grpc.ClientStream
}

type sprintManagementListSprintsClient struct {
	grpc.ClientStream
}

func (x *sprintManagementListSprintsClient) Recv() (*Sprint, error) {
	m := new(Sprint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SprintManagementServer is the server API for SprintManagement service.
// All implementations must embed UnimplementedSprintManagementServer
// for forward compatibility
type SprintManagementServer interface {
	AddSprint(context.Context, *Sprint) (*wrapperspb.StringValue, error)
	GetSprint(context.Context, *GetSprintRequest) (*Sprint, error)
	ListSprints(*wrapperspb.StringValue, SprintManagement_ListSprintsServer) error
	mustEmbedUnimplementedSprintManagementServer()
}

// UnimplementedSprintManagementServer must be embedded to have forward compatible implementations.
type UnimplementedSprintManagementServer struct {
}

func (UnimplementedSprintManagementServer) AddSprint(context.Context, *Sprint) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSprint not implemented")
}
func (UnimplementedSprintManagementServer) GetSprint(context.Context, *GetSprintRequest) (*Sprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSprint not implemented")
}
func (UnimplementedSprintManagementServer) ListSprints(*wrapperspb.StringValue, SprintManagement_ListSprintsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSprints not implemented")
}
func (UnimplementedSprintManagementServer) mustEmbedUnimplementedSprintManagementServer() {}

// UnsafeSprintManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SprintManagementServer will
// result in compilation errors.
type UnsafeSprintManagementServer interface {
	mustEmbedUnimplementedSprintManagementServer()
}

func RegisterSprintManagementServer(s grpc.ServiceRegistrar, srv SprintManagementServer) {
	s.RegisterService(&SprintManagement_ServiceDesc, srv)
}

func _SprintManagement_AddSprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintManagementServer).AddSprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sprint.SprintManagement/addSprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintManagementServer).AddSprint(ctx, req.(*Sprint))
	}
	return interceptor(ctx, in, info, handler)
}

func _SprintManagement_GetSprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintManagementServer).GetSprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sprint.SprintManagement/getSprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintManagementServer).GetSprint(ctx, req.(*GetSprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SprintManagement_ListSprints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SprintManagementServer).ListSprints(m, &sprintManagementListSprintsServer{stream})
}

type SprintManagement_ListSprintsServer interface {
	Send(*Sprint) error
	grpc.ServerStream
}

type sprintManagementListSprintsServer struct {
	grpc.ServerStream
}

func (x *sprintManagementListSprintsServer) Send(m *Sprint) error {
	return x.ServerStream.SendMsg(m)
}

// SprintManagement_ServiceDesc is the grpc.ServiceDesc for SprintManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SprintManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sprint.SprintManagement",
	HandlerType: (*SprintManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addSprint",
			Handler:    _SprintManagement_AddSprint_Handler,
		},
		{
			MethodName: "getSprint",
			Handler:    _SprintManagement_GetSprint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listSprints",
			Handler:       _SprintManagement_ListSprints_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sprint.proto",
}
