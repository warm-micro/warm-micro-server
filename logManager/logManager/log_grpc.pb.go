// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiLogMenagementClient is the client API for ApiLogMenagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiLogMenagementClient interface {
	AddLog(ctx context.Context, in *ApiLog, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	ListLogs(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (ApiLogMenagement_ListLogsClient, error)
	ListCounts(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (ApiLogMenagement_ListCountsClient, error)
}

type apiLogMenagementClient struct {
	cc grpc.ClientConnInterface
}

func NewApiLogMenagementClient(cc grpc.ClientConnInterface) ApiLogMenagementClient {
	return &apiLogMenagementClient{cc}
}

func (c *apiLogMenagementClient) AddLog(ctx context.Context, in *ApiLog, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/log.ApiLogMenagement/addLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiLogMenagementClient) ListLogs(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (ApiLogMenagement_ListLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiLogMenagement_ServiceDesc.Streams[0], "/log.ApiLogMenagement/listLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiLogMenagementListLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiLogMenagement_ListLogsClient interface {
	Recv() (*ApiLog, error)
	grpc.ClientStream
}

type apiLogMenagementListLogsClient struct {
	grpc.ClientStream
}

func (x *apiLogMenagementListLogsClient) Recv() (*ApiLog, error) {
	m := new(ApiLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiLogMenagementClient) ListCounts(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (ApiLogMenagement_ListCountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiLogMenagement_ServiceDesc.Streams[1], "/log.ApiLogMenagement/listCounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiLogMenagementListCountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiLogMenagement_ListCountsClient interface {
	Recv() (*ApiCount, error)
	grpc.ClientStream
}

type apiLogMenagementListCountsClient struct {
	grpc.ClientStream
}

func (x *apiLogMenagementListCountsClient) Recv() (*ApiCount, error) {
	m := new(ApiCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiLogMenagementServer is the server API for ApiLogMenagement service.
// All implementations must embed UnimplementedApiLogMenagementServer
// for forward compatibility
type ApiLogMenagementServer interface {
	AddLog(context.Context, *ApiLog) (*wrapperspb.StringValue, error)
	ListLogs(*wrapperspb.StringValue, ApiLogMenagement_ListLogsServer) error
	ListCounts(*wrapperspb.StringValue, ApiLogMenagement_ListCountsServer) error
	mustEmbedUnimplementedApiLogMenagementServer()
}

// UnimplementedApiLogMenagementServer must be embedded to have forward compatible implementations.
type UnimplementedApiLogMenagementServer struct {
}

func (UnimplementedApiLogMenagementServer) AddLog(context.Context, *ApiLog) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLog not implemented")
}
func (UnimplementedApiLogMenagementServer) ListLogs(*wrapperspb.StringValue, ApiLogMenagement_ListLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}
func (UnimplementedApiLogMenagementServer) ListCounts(*wrapperspb.StringValue, ApiLogMenagement_ListCountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCounts not implemented")
}
func (UnimplementedApiLogMenagementServer) mustEmbedUnimplementedApiLogMenagementServer() {}

// UnsafeApiLogMenagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiLogMenagementServer will
// result in compilation errors.
type UnsafeApiLogMenagementServer interface {
	mustEmbedUnimplementedApiLogMenagementServer()
}

func RegisterApiLogMenagementServer(s grpc.ServiceRegistrar, srv ApiLogMenagementServer) {
	s.RegisterService(&ApiLogMenagement_ServiceDesc, srv)
}

func _ApiLogMenagement_AddLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiLogMenagementServer).AddLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.ApiLogMenagement/addLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiLogMenagementServer).AddLog(ctx, req.(*ApiLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiLogMenagement_ListLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiLogMenagementServer).ListLogs(m, &apiLogMenagementListLogsServer{stream})
}

type ApiLogMenagement_ListLogsServer interface {
	Send(*ApiLog) error
	grpc.ServerStream
}

type apiLogMenagementListLogsServer struct {
	grpc.ServerStream
}

func (x *apiLogMenagementListLogsServer) Send(m *ApiLog) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiLogMenagement_ListCounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiLogMenagementServer).ListCounts(m, &apiLogMenagementListCountsServer{stream})
}

type ApiLogMenagement_ListCountsServer interface {
	Send(*ApiCount) error
	grpc.ServerStream
}

type apiLogMenagementListCountsServer struct {
	grpc.ServerStream
}

func (x *apiLogMenagementListCountsServer) Send(m *ApiCount) error {
	return x.ServerStream.SendMsg(m)
}

// ApiLogMenagement_ServiceDesc is the grpc.ServiceDesc for ApiLogMenagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiLogMenagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log.ApiLogMenagement",
	HandlerType: (*ApiLogMenagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addLog",
			Handler:    _ApiLogMenagement_AddLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listLogs",
			Handler:       _ApiLogMenagement_ListLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listCounts",
			Handler:       _ApiLogMenagement_ListCounts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log.proto",
}
